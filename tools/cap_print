#!/bin/python3
import sys
import copy
import json

import capability


class cap_print:
    def __init__(self):
        self.capability = capability.capability()
 
    def flag_to_caps_text(self, flag: str) -> list:
        cap_list = []
        for key in self.capability.CAPS.keys():
            if flag[len(flag) - (self.capability.CAPS[key]+1)] == "1":
                cap_list.append(key)

        return cap_list

    def hex_to_bin_text(self, text: str) -> str:
        num = int(text, 16)
        format_str = "0" + str(len(text)*4) + "b"
        flag = format(num, format_str)

        return flag

    def file_read(self, file_path: str, arg_e: list) -> list:
        file = open(file_path, "r")
        caps = {}
        caps_list = []
        for tmp in file.readlines():
            cap_str_flag = False
            for arg in arg_e:
                if arg in tmp:
                    cap_str_flag = True
            if cap_str_flag:
                cap_info = tmp.split(":")
                cap_title = cap_info[0]
                cap_flag = cap_info[1].replace(" ", "")
                cap_flag = cap_flag.replace("\n", "")
                caps = copy.deepcopy(caps)
                caps['title'] = cap_title
                caps['value'] = cap_flag
                caps_list.append(caps)
            else:
                continue
        return caps_list


class option:
    def __init__(self):
        self.args = {"option": "", "source": "", "args_e": []}
        self.options = ['-h', '-f']
        self.cap_type = ['CapInh', 'CapPrm', 'CapEff', 'CapBnd', 'CapAmb']

    def check(self, args: list) -> dict:
        option_invalid = not (args[1] in self.options)
        if option_invalid:
            print('option format invalid')
            return None

        self.args['option'] = args[1]
        self.args["source"] = args[2]
        if len(args) >= 3:
            tmp = []
            for arg in args[3:]:
                for ct in self.cap_type:
                    if arg == ct:
                        tmp.append(arg)
            self.args["args_e"] = tmp

        return self.args


if __name__ == "__main__":
    opt = option()
    caps = []
    command = opt.check(sys.argv)
    capp = cap_print()
    if command['option'] == '-h':
        caps.append({'value': command['source']})
    elif command['option'] == '-f':
        caps = capp.file_read(command['source'], command['args_e'])

    for cap in caps:
        cap['value'] = capp.hex_to_bin_text(cap['value'])
        cap['value'] = capp.flag_to_caps_text(cap['value'])

    print(json.dumps(caps))
